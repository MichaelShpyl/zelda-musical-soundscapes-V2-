name: CI

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step to check out the repository
      - name: Check out repository
        uses: actions/checkout@v2
        # Comment: Always start by pulling the latest code from GitHub. Gotta work with the freshest stuff!

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
        # Comment: Setting up Python 3.9 for all the fun packages we need later.

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install pytest pdoc cfn-lint awscli bandit
        # Comment: Loading up the tools for tests, docs, and AWS linting. Make sure everything we need is here.

      # Lint CloudFormation templates
      - name: Lint CloudFormation
        run: cfn-lint IaC/*.yaml
        # Comment: YAML errors? Nope, not on my watch. This ensures CloudFormation templates are clean.

      # Validate EC2 template
      - name: Validate EC2 template
        run: aws cloudformation validate-template --template-body file://IaC/ec2-instance.yaml --region eu-west-1
        # Comment: Double-check the EC2 CloudFormation template. AWS better not complain.

      # Validate S3 template
      - name: Validate S3 template
        run: aws cloudformation validate-template --template-body file://IaC/s3-bucket.yaml --region eu-west-1
        # Comment: Same drill for the S3 template. Bye-bye AccessControl warnings.

      # Security scan using Bandit
      - name: Security scan with Bandit
        run: bandit -r soundscapes tests
        # Comment: Bandit on patrol! But now it sticks to `soundscapes` and `tests`. No unnecessary drama.

      # Run tests with Maven (if needed)
      - name: Build and test (Maven)
        run: mvn clean test
        # Comment: Maven time! If thereâ€™s Java involved, we make sure it works.

      # Run Python tests (unit and performance)
      - name: Run tests (unit + performance)
        run: pytest
        # Comment: Running all the Python tests to ensure functionality and performance is ðŸ”¥.

      # Generate documentation using pdoc
      - name: Generate docs
        run: pdoc soundscapes --output-dir docs
        # Comment: Auto-doc generation. Letâ€™s make our code easier to understand without manual typing.

      # Upload docs as a build artifact
      - name: Upload docs artifact
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: docs
        # Comment: Uploading docs so the team can grab them easily from the Actions tab.
